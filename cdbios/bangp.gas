
	ORG	$f03000

	include		"jaguar.inc"
	include		"cd_inits.inc"

	XDEF		PTRPOS
	XDEF		SETUP
	XDEF		test

	TEMP		regequ		r28
	CDdata		regequ		r1
	Dataptr		regequ		r2
	Ptrloc		regequ		r0

; The beginning of GPU memory is being used for
; storage
; Set GPC to SETUP

BEGIN:
PTRPOS:
	movei	#SETUP,r0
	jump	(r0)
	nop
	nop
	nop
	nop

EINT_ISR:

	movei	#G_FLAGS,r30
	load	(r30),r29	;read the flags

; Stack r25
	subq	#4,r31
	move	r25,r28
	store	r28,(r31)

; Stack r20
	subq	#4,r31
	move	r20,r28
	store	r28,(r31)

; Stack r27
	subq	#4,r31
	move	r27,r28
	store	r28,(r31)

; Stack r26
	subq	#4,r31
	move	r26,r28
	store	r28,(r31)

; Stack r1
	subq	#4,r31
	move	r1,r28
	store	r28,(r31)

; Stack r2
	subq	#4,r31
	move	r2,r28
	store	r28,(r31)

; Stack r3
	subq	#4,r31
	move	r3,r28
	store	r28,(r31)

	movei	#exit_isr,r25

; Is this a DSARX interrupt?

	movei	#BUTCH,r20
	load	(r20),r27		;check for DSARX int pending
	btst	#13,r27
	jr	z,fifo_read		;If not pending then do fifo reads
	nop	

; Toggle the match bit, to allow data
	bclr	#5,r27
	bset	#1,r27
	store	r27,(r20)		; Disable DSARX interrupt
	addq	#$10,r20
	moveq	#4,r28
	load	(r20),r26
	xor	r28,r26
	store	r26,(r20)		; Toggle SUBCODE match
	
; Now we clear the DSARX interrupt in Butch

;	movei	#$dfff0a,r20	;Butch DSA data register
	subq	#6,r20		; does what the above says
	loadw	(r20),r26	;Clears DSA interrupt 
	or	r26,r26		;Make sure the read happened before the next
	subq	#6,r20		;Butch DSA control register
	load	(r20),r26	;Clears DSA pending interrupt 
;	or	r26,r26		;Make sure the read happened before the next
	subq	#4,r20		; point to the base again
fifo_read:
	or	r26,r26		; Moved from above to make jr work!!!!
	btst	#9,r27		; Check for fifo half full
	jr	nz,do_fifo_read	;If pending then do fifo reads
	nop
	jump	(r25)
	nop

do_fifo_read:

; Check for ERROR!!!!!!!!!!!!!!!!!!!!!
;	btst	#14,r27
;	jr	z,noerror
;	nop
;	addq	#6,r20
;	load	(r20),r26
;	or	r26,r26
;	move	Ptrloc,TEMP
;	addq	#4,TEMP
;	load	(Ptrloc),r26
;	store	r26,(TEMP)
;	moveq	#0,r0
;	movei	#G_CTRL,r1
;	store	r0,(r1)
;	nop
;	nop
noerror:

	movei	#G_HIDATA,r28

	movei	#FIFO_DATA,CDdata
	moveq	#0,r26
	load	(Ptrloc),Dataptr	;get pointer

; Check to see if we should stop
	addq	#4,Ptrloc	
	load	(Ptrloc),TEMP
	subq	#4,Ptrloc	
	cmp	Dataptr,TEMP
	jr	pl,notend
	nop
	bclr	#0,r27
	store	r27,(r20)
notend:

	loadp 	(CDdata),r11		;gulp some bytes from the fifo
	or	r11,r11
	load	(r28),r12
	
	load	(r26),TEMP

	loadp 	(CDdata),r13		;gulp some bytes from the fifo
	or	r13,r13
	load	(r28),r14
	
	load	(r26),TEMP

	loadp 	(CDdata),r15		;gulp some bytes from the fifo
	or	r15,r15
	load	(r28),r16
	
	load	(r26),TEMP

	loadp 	(CDdata),r17		;gulp some bytes from the fifo
	or	r17,r17
	load	(r28),r18
	
	store	r11,(Dataptr)
	addq	#4,Dataptr

	store	r12,(Dataptr)
	addq	#4,Dataptr

	store	r13,(Dataptr)
	addq	#4,Dataptr

	store	r14,(Dataptr)
	addq	#4,Dataptr

	store	r15,(Dataptr)
	addq	#4,Dataptr

	store	r16,(Dataptr)
	addq	#4,Dataptr

	store	r17,(Dataptr)
	addq	#4,Dataptr

	store	r18,(Dataptr)
	addq	#4,Dataptr

;	movei	#$100000,Dataptr
	store	Dataptr,(Ptrloc)

exit_isr:

	movei	#J_INT,r20	;Acknowledge in Jerry
	movei	#$101,r28
	storew	r28,(r20)

; Stack r3
	load	(r31),r28
	addq	#4,r31
	move	r28,r3

; Stack r2
	load	(r31),r28
	addq	#4,r31
	move	r28,r2

; Stack r1
	load	(r31),r28
	addq	#4,r31
	move	r28,r1

; Stack r26
	load	(r31),r28
	addq	#4,r31
	move	r28,r26

; Stack r27
	load	(r31),r28
	addq	#4,r31
	move	r28,r27

; Stack r20
	load	(r31),r28
	addq	#4,r31
	move	r28,r20

; Stack r25
	load	(r31),r28
	addq	#4,r31
	move	r28,r25

;r29 already has flags
	bclr	#3,r29		;IMASK
	bset	#10,r29		;Clear DSP int bit in TOM

	load	(r31),r28	;Load return address
	addq	#2,r28		;Fix it up
	addq	#4,r31		
	jump	(r28)		;Return
	store	r29,(r30)	;Restore broken flags


; Setup the place to get data from
; and the POINTER!! to where to put it

SETUP:
	movei	#PTRPOS,Ptrloc
	movei	#STACK,r31

;	movei	#$1000,r0

	movei	#$1001,r1

	movei	#$1002,r2

	movei	#$1003,r3

	movei	#$1004,r4

	movei	#$1005,r5

	movei	#$1006,r6

	movei	#$1007,r7

	movei	#$1008,r8

	movei	#$1009,r9

	movei	#$1010,r10

	movei	#$1011,r11

	movei	#$1012,r12

	movei	#$1013,r13

	movei	#$1014,r14

	movei	#$1015,r15

	movei	#$1016,r16

	movei	#$1017,r17

	movei	#$1018,r18

	movei	#$1019,r19

	movei	#$1020,r20

	movei	#$1021,r21

	movei	#$1022,r22

	movei	#$1023,r23

	movei	#$1024,r24

	movei	#$1025,r25

	movei	#$1026,r26

	movei	#$1027,r27

	movei	#$1028,r28

	movei	#$1029,r29

	movei	#$1030,r30

;	movei	#$1031,r31

loploc:
	nop
	jr	loploc
	nop

stackbot:
	ds.l	10
STACK:

