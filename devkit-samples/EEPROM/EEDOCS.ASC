Copyright (c)1994 Atari Corp.
All Rights Reserved
Confidential Information
Property of Atari Corporation
19 January, 1995

=========================================================================
                     Storing Non-Volatile Game Data
=========================================================================

The Jaguar provides several options for game developers to store non-
volatile game information such as high scores, options, saved games,
music/sound effect levels, etc... while the unit is powered down.

=====================================
Standard Cartridge E2PROM (128 bytes)
=====================================

Standard Jaguar Cartridge PCB's are currently equipped with a 128 byte
E2PROM for non-volatile storage. Developer Alpine boards also contain a
compatible part for use in game testing. These parts are rated for
approximately 100,000 write cycles before failure though we have
achieved a much higher number of successful writes in our testing.

In order to provide compatibilty with the parts we use in manufacturing,
we supply tested code which should be used to access the E2PROM. This
code should not be modified in any manner unless prior approval is
granted by Atari Corp. The file EEPROM.S contains six functions used for
reading, writing, and performing checksums on this data. Use of these
functions requires that a valid stack pointer has been set in A7. These
functions are as follows:

----------
eeReadWord
----------

This function reads one 16-bit word (address #0-62) from the E2PROM.
This function pays no attention to the checksum and therefore has no way
to be sure the data is valid. A call to eeValidateChecksum will ensure
that successive calls to eeReadWord will return valid data.

Input:
     d1.w -> E2PROM address to read from.

Returns:
     d0.w -> Value read.

Register Usage:
     Preserves all other registers.

-----------
eeWriteWord
-----------

This function attempts to write one 16-bit word (address #0-62) to the
E2PROM. This function does not update the checksum and will thus cause
any subsequent calls to eeReadBank or eeValidateChecksum to fail. The
function eeUpdateChecksum must be used after any series of eeWriteWord
calls to make the checksum valid again.

Input:
     d1.w -> E2PROM address to write to.
     d0.w -> Data to write.

Returns:
     d0.w -> 0 = Successful.
          -> 1 = Write failed.

Register Usage:
     Preserves all other registers.

----------
eeReadBank
----------

This function reads 63 16-bit words from the E2PROM into a supplied
buffer and validates the data against the stored checksum to ensure the
data read is good.

Input:
     a0.l -> Address of a buffer 63 16-bit words in length to receive data
             from the E2PROM.

Returns:
     d0.w -> 0 = Successful.
          -> 1 = Checksum invalid.

Register Usage:
     Preserves all other registers.

-----------
eeWriteBank
-----------

This functions stores 63 16-bit words supplied to it in the E2PROM,
checksums the data, and stores the checksum at address #63. We recommend
that this function only be used when a large amount of data needs to be
stored since this counts as 64 writes against the 100,000 rated limit.
If you only change a couple of words, use eeWriteWord(s) followed by
eeUpdateChecksum.

Input:
     a0.l -> Address of a buffer containing 63 16-bit words to write to the
             E2PROM.

Returns:
     d0.w -> 0 = Successful.
          -> 1 = Write failed.

Register Usage:
     Preserves all other registers.

----------------
eeUpdateChecksum
----------------

This functions checksums the first 63 16-bit words from the E2PROM and
stores the checksum at address #63.

Input:
     None.

Returns:
     d0.w -> 0 = Successful.
          -> 1 = Checksum write failed.

Register Usage:
     Preserves all other registers.

------------------
eeValidateChecksum
------------------

This function checksums the first 63 16-bit words from the E2PROM and
compares the checksum to the value stored at address #63. This function
does not change any stored data.

Input:
     None.

Returns:
     d0.w -> 0 = Successful.
          -> 1 = Checksum invalid.

Register Usage:
     Preserves all other registers.

===============================
Extended Cartridge E2PROM (16k)
===============================

We are currently in the design phase of a new cartridge PCB which will
contain a 16k E2PROM. Third-parties will be able to request this PCB to
provide access to the greater amount of storage. Because this project is
still under development, no further details are available yet. Atari
will notify developers when this part becomes available.

==============================
CD Flash ROM Storage Cartridge
==============================

Because CD-ROM titles do not normally have access to non-volatile
storage, Atari Corp. will be making available a 128k Flash ROM cartridge
as a consumer product. This will allow end-users the option of
purchasing this cartridge to give them the ability to save high scores
and game information. The protocols for accessing this cartridge have
not yet been made available. Atari will notify developers as more
information becomes available.

=========
Questions
=========

For any questions related to E2PROM programming and the Jaguar contact:

Scott Sanders
Jaguar Guru
Jaguar Developer Support
408/745-2143
70007.1135@compuserve.com